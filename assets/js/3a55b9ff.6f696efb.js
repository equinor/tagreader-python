"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9742],{2399:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"about/usage/fetching-metadata","title":"Fetching metadata","description":"Two client methods have been created to fetch basic metadata for one or more tags.","source":"@site/docs/about/usage/fetching-metadata.md","sourceDirName":"about/usage","slug":"/about/usage/fetching-metadata","permalink":"/tagreader-python/docs/about/usage/fetching-metadata","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/tagreader-python/tree/main/documentation/docs/about/usage/fetching-metadata.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"about","previous":{"title":"Data sources","permalink":"/tagreader-python/docs/about/usage/data-source"},"next":{"title":"Caching results","permalink":"/tagreader-python/docs/about/usage/caching"}}');var s=a(4848),i=a(8453);const r={sidebar_position:3},o="Fetching metadata",d={},c=[{value:"get_units()",id:"get_units",level:3},{value:"get_description()",id:"get_description",level:3}];function g(e){const t={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"fetching-metadata",children:"Fetching metadata"})}),"\n",(0,s.jsx)(t.p,{children:"Two client methods have been created to fetch basic metadata for one or more tags."}),"\n",(0,s.jsx)(t.h3,{id:"get_units",children:"get_units()"}),"\n",(0,s.jsxs)(t.p,{children:["Fetches the engineering unit(s) for the tag(s) provided. The argument ",(0,s.jsx)(t.code,{children:"tags"})," can be either a single tagname as string,\nor a list of tagnames."]}),"\n",(0,s.jsx)(t.h3,{id:"get_description",children:"get_description()"}),"\n",(0,s.jsxs)(t.p,{children:["Fetches the description(s) for the tag(s) provided. The argument ",(0,s.jsx)(t.code,{children:"tags"})," can be either a single tagname as string,\nor a list of tagnames."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Example"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'tags = ["BA:ACTIVE.1", "BA:LEVEL.1", "BA:CONC.1"]\nunits = c.get_units(tags)\ndesc = c.get_descriptions(tags)\ntag = "BA:CONC.1"\ndf[tag].plot(grid=True, title=desc[tag]).set_ylabel(units[tag])\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}}}]);