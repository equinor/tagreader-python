"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4930],{2167:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"about/usage/time-zone","title":"Time zones","description":"It is important to understand how Tagreader uses and interprets time zones. Queries to the backend servers are always","source":"@site/docs/about/usage/time-zone.md","sourceDirName":"about/usage","slug":"/about/usage/time-zone","permalink":"/tagreader-python/docs/about/usage/time-zone","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/tagreader-python/tree/main/documentation/docs/about/usage/time-zone.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"about","previous":{"title":"Caching results","permalink":"/tagreader-python/docs/about/usage/caching"}}');var a=n(4848),o=n(8453);const s={sidebar_position:6},r="Time zones",d={},l=[];function c(e){const t={code:"code",em:"em",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"time-zones",children:"Time zones"})}),"\n",(0,a.jsx)(t.p,{children:"It is important to understand how Tagreader uses and interprets time zones. Queries to the backend servers are always\nperformed in UTC time, and return data is also always in UTC. However, it is usually not convenient to ensure all time\nstamps are in UTC time. The client and handlers therefore have functionality for converting between UTC and\nuser-specified time zones."}),"\n",(0,a.jsx)(t.p,{children:"There are two levels of determining which time zone input arguments should be interpreted as, and which time zone\nreturn data should be converted to:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Time zone aware input arguments will use their corresponding time zone."}),"\n",(0,a.jsx)(t.li,{children:"Time zone naive input arguments are assumed to have time zone as provided by the client."}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["The client-provided time zone can be specified with the optional ",(0,a.jsx)(t.code,{children:"tz"}),' argument (string, e.g. "',(0,a.jsx)(t.em,{children:"US/Central"}),'") during\nclient creation. If it is not specified, then the default value ',(0,a.jsx)(t.em,{children:"Europe/Oslo"})," is used. Note that for the most common\nuse case where Equinor employees want to fetch data from Norwegian assets and display them with Norwegian time stamps,\nnothing needs to be done."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"Note:"})," It is a good idea to update the ",(0,a.jsx)(t.code,{children:"pytz"})," package rather frequently (at least twice per year) to ensure that time\nzone information is up-to-date. ",(0,a.jsx)(t.code,{children:"pip install --upgrade pytz"})," ."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Example (advanced usage)"})}),"\n",(0,a.jsx)(t.p,{children:"An employee in Houston is contacted by her colleague in Brazil about an event that she needs to investigate.\nThe colleague identified the time of the event at July 20th 2020 at 15:05:00 Rio time. The Houston employee wishes to\nextract interpolated data with 60-second intervals and display the data in her local time zone. She also wishes to send\nthe data to her Norwegian colleague with datestamps in Norwegian time. One way of doing this is :"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import tagreader\nfrom datetime import datetime, timedelta\nfrom dateutil import tz\nc = tagreader.IMSClient("PINO", "pi", tz="US/Central")  # Force output data to Houston time\nc.connect()\ntzinfo = tz.gettz("Brazil/East")  # Generate timezone object for Rio local time\nevent_time = datetime(2020, 7, 20, 15, 5, 0, tzinfo=tzinfo)\nstart_time = event_time - timedelta(minutes=30)\nend_time = event_time + timedelta(minutes=10)\ndf = c.read(["BA:CONC.1"], start_time, end_time, ts=60)\ndf_to_Norway = df.tz_convert("Europe/Oslo")  # Create a copy of the dataframe with Norwegian time stamps\n'})})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);